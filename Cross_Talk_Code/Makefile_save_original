# Makefile for analysis of JLab FADC data
#
# Use this if compiling online code (ET system)
# User must have LD_LIBRARY_PATH = $CODA/$OSNAME/lib:$LD_LIBRARY_PATH
# export ONLINE = 1

# Use this if profiling (note: it slows down the code)
# export PROFILE = 1

# To make standalone, independent of root CINT macros
export STANDALONE = 1

export OSNAME := $(shell uname)

ifeq ($(OSNAME),SunOS)

   ROOTCFLAGS    = $(shell root-config --cflags)
   ROOTLIBS      = $(shell root-config --libs)
   ROOTGLIBS     = $(shell root-config --glibs)
   CXX           = CC
#   CXXFLAGS      = -O  -DSUNVERS -I$(ROOTSYS)/root/include
   CXXFLAGS      = -O  -DSUNVERS 
   LD            = CC
   LDFLAGS       = -g -D
   SOFLAGS       = -G
   CXXFLAGS     += $(ROOTCFLAGS)
   EVIO_LIB=libevio.a
   GLIB =  -lm -lc -lgen -lw -lsocket -lnsl -ldl
   SLIB = -L/opt/SUNWspro/SC4.2/lib -lF77 -lM77 -lsunmath
# all this needed for ET...  up to comment below
   ET_AC_FLAGS = -D_REENTRANT -D_POSIX_THREAD_SEMANTICS
   ET_CFLAGS = -mt -fast -xO5  $(ET_AC_FLAGS) -DSUNVERS
   CODA = /adaqfs/coda/2.2
   LIBET = $(CODA)/SunOS/lib/libet.so
   ONLIBS = $(LIBET) -lposix4 -lnsl -lsocket -lresolv
   LIBS = $(EVIO_LIB) $(GLIB)
   ifdef ONLINE
     ALL_LIBS = $(LIBS) $(ONLIBS) 
# ... finished, what ET needs.
   else
     ALL_LIBS = $(LIBS) 
   endif
   ALL_LIBS += $(ROOTLIBS) $(ROOTGLIBS)

endif


ifeq ($(OSNAME),Linux)

   ifdef OLDROOT
     ROOTLIBS      = -L$(ROOTSYS)/lib -lNew -lBase -lCint -lClib -lCont -lFunc \
                    -lGraf -lGraf3d -lHist -lHtml -lMatrix -lMeta -lMinuit -lNet \
                    -lPhysics -lPostscript -lProof -lRint -lTree -lUnix -lZip
     ROOTGLIBS     = -lGpad -lGui -lGX11 -lX3d
   else
     ROOTLIBS      = $(shell root-config --libs)
     ROOTGLIBS     = $(shell root-config --glibs)
   endif

   CXX           = g++
   CXXFLAGS      = -Wall  -fno-exceptions -fPIC  \
                   -DLINUXVERS -I$(ROOTSYS)/include -O

# Linux with egcs
   INCLUDES      = -I$(ROOTSYS)/include 
   CXX           = g++
   CXXFLAGS      = -O -Wall  -fno-exceptions  -fPIC $(INCLUDES)
   CXXFLAGS     += -Wno-deprecated 
   LD            = g++
   LDFLAGS       = 
   SOFLAGS       = -shared

   ifdef OLDROOT
      LIBS          = $(ROOTLIBS) -lm -ldl -rdynamic
      GLIBS         = $(ROOTLIBS) $(ROOTGLIBS) -L/usr/X11R6/lib \
                      -lXpm -lX11 -lm -ldl -rdynamic
      CXXFLAGS     += -DOLDROOT
   else
      LIBS          = $(ROOTLIBS)
      GLIBS         = $(ROOTGLIBS) -L/usr/X11R6/lib -lXpm -lX11
   endif

   EVIO_LIB=libevio.a
   ALL_LIBS = $(EVIO_LIB) $(GLIBS) $(ROOTLIBS) 

# ONLIBS is needed for ET
  ET_AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS
  ET_CFLAGS = -02 -fPIC $(ET_AC_FLAGS) -DLINUXVERS
# CODA may be an environment variable.  Typical examples
#  CODA = /adaqfs/coda/2.2
#  CODA = /data7/user/coda/2.2
  LIBET = $(CODA)/Linux/lib/libet.so
  ONLIBS = $(LIBET) -lieee -lpthread -ldl -lresolv

  ifdef ONLINE
     ALL_LIBS += $(ONLIBS)
  endif

  ifdef PROFILE
     CXXFLAGS += -pg
  endif

endif

SRC = THaCodaFile.C THaCodaData.C 
ifdef ONLINE 
  SRC += THaEtClient.C
endif
HEAD = $(SRC:.C=.h)
DEPS = $(SRC:.C=.d)
DECODE_OBJS = $(SRC:.C=.o)

ifdef STANDALONE 
  CXXFLAGS += -DSTANDALONE
endif

all: vetrocana

vetrocana: VETROC_main1.o $(DECODE_OBJS) $(HEAD) libevio.a
	$(CXX) -g $(CXXFLAGS) -o $@ VETROC_main1.C $(DECODE_OBJS) $(ALL_LIBS) 

evan: VETROC_evan.o $(DECODE_OBJS) $(HEAD) libevio.a
	$(CXX) -g $(CXXFLAGS) -o $@ VETROC_evan.C $(DECODE_OBJS) $(ALL_LIBS) 

simple_evan: simple_evan.o $(DECODE_OBJS) $(HEAD) libevio.a
	$(CXX) -g $(CXXFLAGS) -o $@ simple_evan.C $(DECODE_OBJS) $(ALL_LIBS) 

minimal: VETROC_minimal.o $(DECODE_OBJS) $(HEAD) libevio.a
	$(CXX) -g $(CXXFLAGS) -o $@ VETROC_minimal.C $(DECODE_OBJS) $(ALL_LIBS) 

timingPlots: timingPlots.o $(DECODE_OBJS) $(HEAD) libevio.a
	$(CXX) -g $(CXXFLAGS) -o $@ timingPlots.C $(DECODE_OBJS) $(ALL_LIBS) 

# Here we build a library with all this stuff
libcoda.a: $(DECODE_OBJS) clean_evio evio.o swap_util.o 
	rm -f $@
	ar cr $@ $(DECODE_OBJS) evio.o swap_util.o 

# Below is the evio library, which comes rather directly 
# from CODA group with minor tweaking by R. Michaels & O. Hansen.

libevio.a: clean_evio evio.o swap_util.o 
	rm -f $@
	ar cr $@ evio.o swap_util.o 

evio.o: evio.C
	$(CXX) -c  $<

swap_util.o: swap_util.C
	$(CXX) -c  $<

clean:  clean_evio
	rm -f *.o *.a core *~ *.d *.out adcana

realclean:  clean
	rm -f *.d

clean_evio:
	rm -f evio.o swap_util.o 


.SUFFIXES:
.SUFFIXES: .c .cc .cpp .C .o .d

%.o:	%.C
	$(CXX) $(CXXFLAGS) -c $<

%.d:	%.C
	@echo Creating dependencies for $<
	@$(SHELL) -ec '$(CXX) -MM $(CXXFLAGS) -c $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

-include $(DEPS)








